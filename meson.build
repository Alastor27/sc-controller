project('scc', 'c',
	version: '3.14',
	license: 'GPL-2',
	default_options : ['c_std=gnu11'],
)

CONFIG_BACKEND = 'config_json'
PARSER_LIB_DEPS = []
C_FILES = '*.c'

if host_machine.system() == 'windows'
	add_global_arguments('-D_POSIX', '-DNO_TRACEBACKS', '-mno-ms-bitfields', language: 'c')
	PARSER_LIB_DEPS = [ meson.get_compiler('c').find_library('regex') ]
	CONFIG_BACKEND = 'config_win32'
	C_FILES = '\\*.c'
endif

if get_option('tracebacks').disabled()
	add_global_arguments('-DNO_TRACEBACKS', language: 'c')
endif

if get_option('android').enabled()
	add_global_arguments('-DANDROID', '-DNO_TRACEBACKS', language: 'c')
endif

add_global_arguments('-Werror=incompatible-pointer-types', '-Werror=switch', language: 'c')
include = include_directories('./include/')

utils_lib = static_library('utils',
	include_directories: include,
	sources: [
		'src/utils/msys_socket.c',
		'src/utils/strbuilder.c',
		'src/utils/traceback.c',
		'src/utils/tokenizer.c',
		'src/utils/argparse.c',
		'src/utils/logging.c',
		'src/utils/hashmap.c',
		'src/utils/intmap.c',
		'src/utils/aojls.c',
		'src/utils/list.c',
		'src/utils/math.c',
	]
)

# Difference between tools and utils:
#  - utils are universal stuff taken from other project (such as hashmap)
#  - tools are scc-specific functions used on many places (such as find_profile)
tools_lib = static_library('tools',
	include_directories: include,
	sources: [
		'src/tools/constants.c',
		'src/tools/userdata.c',
		'src/tools/paths.c',
	]
)

config_lib = static_library('config',
	link_with: [utils_lib, tools_lib],
	include_directories: include,
	sources: [
		'src/config/config_defaults.c',
		'src/config/' + CONFIG_BACKEND + '.c',
	],
)

params_lib = static_library('params',
	link_with: [utils_lib],
	include_directories: include,
	sources: run_command('find', 'src/actions/parameter',
			'-maxdepth', '1', '-name', C_FILES).stdout().strip().split('\n')
)

param_checker_lib = static_library('param_checker',
	link_with: [utils_lib],
	include_directories: include,
	sources: run_command('find', 'src/actions/param_checker',
			'-maxdepth', '1', '-name', C_FILES).stdout().strip().split('\n')
)

action_files = (run_command('find', 'src/actions/',
			'-name', C_FILES).stdout().strip().split('\n'))
actions_lib = static_library('actions',
	link_with: [utils_lib, tools_lib, params_lib, param_checker_lib],
	include_directories: include,
	dependencies: [ meson.get_compiler('c').find_library('m') ],
	sources: action_files + [
		custom_target('actions_lib_autogenerated_initializers',
			input: 'src/actions/generate_initializers.sh',
			depend_files: [ 'src/actions/generate_initializers.sh' ] + action_files,
			command: ['bash', '@INPUT@'] + action_files,
			output: 'action_initializers.inc',
			build_by_default: true,
			capture: true,
		)
	]
)

parser_lib = static_library('parser',
	include_directories: include,
	dependencies: PARSER_LIB_DEPS,
	link_with: [utils_lib, actions_lib, params_lib],
	sources: run_command('find', 'src/parser',
			'-maxdepth', '1', '-name', C_FILES).stdout().strip().split('\n')
)

subdir('tests')
subdir('src/daemon/drivers')
subdir('src/daemon')
subdir('src/client')
if get_option('android').disabled()
	subdir('src/osd')
endif
