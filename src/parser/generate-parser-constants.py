#!/usr/bin/env python
from cheader import defines


def good_constant(k):
	if "_" not in k:
		return False
	if k.split("_", 1)[0] not in ("ABS", "KEY", "BTN", "REL", "SCC"):
		return False
	return True

def key_or_abs(k):
	return "_" in k and k.split("_", 1)[0] in ("ABS", "KEY", "BTN", "REL")


if __name__ == '__main__':
	output = open("generated_constants.c", "w")
	
	print >>output, """/*
 * SC Controller - Auto-generated map of constants
 *
 * ========= THIS FILE IS AUTOGENERATED ==========
 * 
 * Generated by generate-parser-constants.py from include/scc/input-event-codes.h
 * Probably don't edit by hand.
 * 
 * There are two blocks in this file: One big const() block and one map[string]uint32 map
 * that allows action parser to use this without introspection.
 */

#include "scc/utils/hashmap.h"
#include "scc/utils/intmap.h"
#include "scc/utils/assert.h"

static map_t constants = NULL;
static intmap_t keys = NULL;

static void generate_constants();

/** Returns -1 if there is no constant for given name */
int64_t scc_get_int_constant(const char* key) {
	if (constants == NULL) generate_constants();
	if (constants == NULL) return -2;	// OOM happened
	
	void* value;
	if (hashmap_get(constants, key, &value) != MAP_OK) {
		return -1;
	}
	return (int64_t)value;
}

const char* scc_get_key_name(int32_t code) {
	const char* name;
	if (intmap_get(keys, code, (any_t)&name) != MAP_OK) {
		return NULL;
	}
	return name;
}

static void generate_constants() {
	constants = hashmap_new();
	keys = intmap_new();
	if ((constants == NULL) || (keys == NULL)) return;
	hashmap_dont_copy_keys(constants);
	
""",
	for path, filename in [
				('../../include/scc/', 'controller.h'),
				('../../include/scc/', 'input-event-codes.h')
			]:
		chead = defines(path, filename)
		print >>output, '\t// %s' % (filename,)
		for k, v in chead.items():
			if good_constant(k):
				if k.startswith("SCC_"): k = k[4:]
				print >>output, '\thashmap_put(constants, "%s", (void*)%s);' % (k, v)
		
		for k, v in chead.items():
			if "KEY_" in k:
				print >>output, '\tintmap_put(keys, %s, "%s");' % (v, k)

	print >>output, """}
""",
